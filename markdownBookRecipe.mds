# Licensed under the MIT License
# https://github.com/craigahobbs/hobbs-family-cookbook/blob/main/LICENSE


#
# Markdown Book scalable recipe library
#


# Recipe scaling min/max
recipeMinScale = 0.125
recipeMaxScale = 8


# Get the recipe scale factor (default is 1)
function recipeScale()
    return if(vScale != null, mathMax(recipeMinScale, mathMin(recipeMaxScale, vScale)), 1)
endfunction


# Render the recipe page's top-menu
function recipeMenu()
    markdownPrint('[Index](#url=&' + \
        if(vCategory != null, "var.vCategory='" + encodeURIComponent(vCategory) + "'&" + markdownHeaderId(vCategory), 'var=') + ')')
endfunction


# Render the recipe page's header. Options: author, servings.
function recipeHeader(options)
    author = if(options != null, objectGet(options, 'author'))
    servings = if(options != null, objectGet(options, 'servings'))
    scale = recipeScale()
    halfScale = 0.5 * scale
    doubleScale = 2 * scale
    if(author != null, markdownPrint('', 'Author: ' + markdownEscape(author)))
    category = if(vCategory != null, "var.vCategory='" + encodeURIComponent(vCategory) + "'&", '')
    markdownPrint( \
        '', 'Scale: ' + mathRound(scale, 3) + stringFromCharCode(160, 160) + \
        if(halfScale >= recipeMinScale, '([Halve](#' + category + 'var.vScale=' + mathRound(halfScale, 3) + ') | ', '(Halve | '), \
        if(doubleScale <= recipeMaxScale, '[Double](#' + category + 'var.vScale=' + mathRound(doubleScale, 3) + '))', 'Double)') \
    )
    if(servings != null, markdownPrint('', 'Servings: ' + scale * servings))
endfunction


# Parse, scale, and render the recipe ingredient text
function recipeIngredients(ingredients)
    scale = recipeScale()
    ixIngredient = 0
    ingredientLoop:
        ingredient = arrayGet(ingredients, ixIngredient)
        jumpif (ingredient == null) ingredientSkip
            ingredientModel = recipeParseIngredient(ingredient)
            if(ingredientModel == null, debugLog('Invalid ingredient text "' + ingredient + '"'))
            if(ingredientModel != null, markdownPrint('', recipeIngredientText(ingredientModel, scale)))
        ingredientSkip:
        ixIngredient = ixIngredient + 1
    jumpif (ixIngredient < arrayLength(ingredients)) ingredientLoop
endfunction


# Parse ingredient text to an ingredient model
function recipeParseIngredient(ingredient)
    match = regexMatch(recipeIngredientRegex, ingredient)
    groups = if(match != null, objectGet(match, 'groups', null), null)
    whole = if(match != null && objectGet(groups, 'whole') != null,  numberParseFloat(objectGet(groups, 'whole')), 0)
    numer = if(match != null && objectGet(groups, 'numer') != null, numberParseInt(objectGet(groups, 'numer')), 0)
    denom = if(match != null && objectGet(groups, 'denom') != null, numberParseInt(objectGet(groups, 'denom')), 1)
    unit = if(match != null && objectGet(groups, 'unit') != null, objectGet(groups, 'unit'), null)
    unit = if(unit == null, 'count', if(objectGet(recipeAlternateUnits, unit) != null, objectGet(recipeAlternateUnits, unit), unit))
    name = if(match != null, objectGet(groups, 'name'), null)
    jumpif ((whole != 0 || numer != 0) && name != null) isIngredient
        return null
    isIngredient:
    return objectNew( \
        'amount', whole + numer / denom, \
        'unit', unit, \
        'name', name \
    )
endfunction


# Ingredient unit info map
recipeUnitInfo = objectNew( \
    'count', objectNew( \
        'baseUnit', 'count', \
        'display', '', \
        'baseRatio', 1, \
        'fractions', arrayNew(2, 4, 8) \
    ), \
    'cup', objectNew( \
        'alternates', arrayNew('C', 'Cup', 'Cups', 'c', 'cups'), \
        'display', 'C', \
        'baseUnit', 'tsp', \
        'baseRatio', 48, \
        'fractions', arrayNew(2, 3, 4, 8) \
    ), \
    'lb', objectNew( \
        'alternates', arrayNew('Lb', 'Lbs', 'Pound', 'Pounds', 'lbs', 'pound', 'pounds'), \
        'baseUnit', 'oz', \
        'baseRatio', 16, \
        'fractions', arrayNew(2, 4, 8) \
    ), \
    'oz', objectNew( \
        'alternates', arrayNew('Oz', 'Ounce', 'Ounces', 'ounce', 'ounces'), \
        'baseUnit', 'oz', \
        'baseRatio', 1, \
        'fractions', arrayNew(2, 4, 8) \
    ), \
    'pinch', objectNew( \
        'baseUnit', 'pinch', \
        'baseRatio', 1, \
        'fractions', arrayNew(1) \
    ), \
    'tbsp', objectNew( \
        'alternates', arrayNew('T', 'Tbsp', 'Tablespoon', 'Tablespoons', 'tablespoon', 'tablespoons'), \
        'baseUnit', 'tsp', \
        'baseRatio', 3, \
        'fractions', arrayNew(1, 2) \
    ), \
    'tsp', objectNew( \
        'alternates', arrayNew('Tsp', 'Teaspoon', 'Teaspoons', 'teaspoon', 'teaspoons'), \
        'baseUnit', 'tsp', \
        'baseRatio', 1, \
        'fractions', arrayNew(2, 4, 8) \
    ) \
)
recipeUnits = objectKeys(recipeUnitInfo)


# Alternate ingredient unit map
recipeAlternateUnits = objectNew()
recipeIxInfo = 0
recipeInfoLoop:
    recipeInfoUnit = arrayGet(recipeUnits, recipeIxInfo)
    recipeInfo = objectGet(recipeUnitInfo, recipeInfoUnit)
    recipeInfoAlternates = objectGet(recipeInfo, 'alternates')
    jumpif (recipeInfoAlternates == null) recipeUnitNoAlternates
        recipeIxInfoAlternate = 0
        recipeInfoAlternateLoop:
            recipeAlternateUnit = arrayGet(recipeInfoAlternates, recipeIxInfoAlternate)
            objectSet(recipeAlternateUnits, recipeAlternateUnit, recipeInfoUnit)
            recipeIxInfoAlternate = recipeIxInfoAlternate + 1
        jumpif (recipeIxInfoAlternate < arrayLength(recipeInfoAlternates)) recipeInfoAlternateLoop
    recipeUnitNoAlternates:
    recipeIxInfo = recipeIxInfo + 1
jumpif (recipeIxInfo < arrayLength(recipeUnits)) recipeInfoLoop


# Ingredient text regular expression
recipeIngredientRegex = regexNew( \
    '^(?:\s*(?<whole>[1-9][0-9]*(?:\\.[0-9]*)?))?(?:\s*(?<numer>[1-9][0-9]*)\s*/\s*(?<denom>[1-9][0-9]*))?' + \
    '(?:\s*(?<unit>' + arrayJoin(recipeUnits, '|') + '|' + arrayJoin(objectKeys(recipeAlternateUnits), '|') + '))?' + \
    '\s+(?!/)(?<name>.+?)\s*$' \
)


# Scale and render an ingredient model to Markdown text
function recipeIngredientText(ingredient, scale)
    ingredientName = objectGet(ingredient, 'name')
    ingredientAmount = objectGet(ingredient, 'amount')
    ingredientUnit = objectGet(ingredient, 'unit')
    ingredientUnitInfo = objectGet(recipeUnitInfo, ingredientUnit)
    ingredientBaseUnit = objectGet(ingredientUnitInfo, 'baseUnit')
    ingredientBaseRatio = objectGet(ingredientUnitInfo, 'baseRatio')

    # Ingredient unit fuzz ratio
    unitFuzz = 0.05

    # Compute the scaled ingredient amount in base units
    amountBase = ingredientAmount * scale * ingredientBaseRatio

    # Try to converting to each known unit to find the best conversion
    bestIngredientUnit = ingredientUnit
    bestIngredientAmount = ingredientAmount * scale
    bestIngredientAmountNumerator = 0
    bestIngredientDiff = null
    ixUnit = 0
    unitLoop:
        unit = arrayGet(recipeUnits, ixUnit)
        info = objectGet(recipeUnitInfo, unit)

        # Skip if not the same base unit
        jumpif (objectGet(info, 'baseUnit') != ingredientBaseUnit) unitDone

        # If scale is 1, skip unless these are the given units
        jumpif (scale == 1 && unit != ingredientUnit) unitDone

        # Match a unit fraction
        amountUnit = amountBase / objectGet(info, 'baseRatio')
        amountUnitInteger = mathFloor(amountUnit)
        amountUnitFraction = amountUnit - amountUnitInteger
        denominators = objectGet(info, 'fractions')
        ixDenominator = 0
        denominatorLoop:
            denominator = arrayGet(denominators, ixDenominator)

            # Compute the closest numerator
            numerator = mathRound(amountUnitFraction * denominator)
            amountFractionInteger = if(numerator != denominator, amountUnitInteger, amountUnitInteger + 1)
            amountFractionNumerator = if(numerator != denominator, numerator, 0)
            amountFraction = amountFractionInteger + (amountFractionNumerator / denominator)
            jumpif (amountFraction == 0) denominatorDone

            # Is the fraction close enough (in base units)?
            diff = mathAbs(amountFraction - amountUnit) * ingredientBaseRatio
            jumpif (diff / amountBase > unitFuzz) denominatorDone

            # Best conversion?
            jumpif (bestIngredientDiff != null && diff >= bestIngredientDiff) denominatorDone

            bestIngredientUnit = unit
            bestIngredientAmount = amountFractionInteger
            bestIngredientAmountNumerator = amountFractionNumerator
            bestIngredientAmountDenominator = denominator
            bestIngredientDiff = diff

            denominatorDone:
            ixDenominator = ixDenominator + 1
        jumpif (ixDenominator < arrayLength(denominators)) denominatorLoop

        unitDone:
        ixUnit = ixUnit + 1
    jumpif (ixUnit < arrayLength(recipeUnits)) unitLoop

    # Create the ingredient text
    bestIngredientInfo = objectGet(recipeUnitInfo, bestIngredientUnit)
    unitStr = if(objectGet(bestIngredientInfo, 'display') != null, objectGet(bestIngredientInfo, 'display'), bestIngredientUnit)
    jumpif (bestIngredientAmountNumerator != 0) nonZeroNumerator
        amountStr = numberToFixed(bestIngredientAmount, 2, true)
        jump ingredientDone
    nonZeroNumerator:
    jumpif (bestIngredientAmount != 0) nonZeroAmount
        amountStr = bestIngredientAmountNumerator + '/' + bestIngredientAmountDenominator
        jump ingredientDone
    nonZeroAmount:
        amountStr = bestIngredientAmount + ' ' + bestIngredientAmountNumerator + '/' + bestIngredientAmountDenominator
    ingredientDone:

    return stringFromCharCode(160, 160, 160) + amountStr + if(unitStr != '', stringFromCharCode(160, 160) + unitStr, '') + \
        stringFromCharCode(160, 160) + ingredientName
endfunction


function recipeTitlePage(model)
    # Set the recipe title page global model
    setGlobal(recipeTitlePageGlobal, schemaValidate(recipeTitlePageTypes, 'RecipeTitlePage', model))

    # Render the title page
    recipeTitlePageRender()

    # Set the title page resize handler
    setWindowResize(recipeTitlePageRender)
endfunction


recipeTitlePageGlobal = 'recipeTitlePageModel'


recipeTitlePageTypes = schemaParse( \
    'struct RecipeTitlePage', \
    '    string title', \
    '    optional string title2', \
    '    optional string subtitle', \
    '    optional string imageURL', \
    '    optional string imageClickURL', \
    '    optional string sourceURL', \
    '    optional string color' \
)


function recipeTitlePageRender()
    model = getGlobal(recipeTitlePageGlobal)
    title = objectGet(model, 'title')
    title2 = objectGet(model, 'title2')
    subtitle = objectGet(model, 'subtitle')
    imageURL = objectGet(model, 'imageURL')
    imageClickURL = objectGet(model, 'imageClickURL')
    sourceURL = objectGet(model, 'sourceURL')
    color = objectGet(model, 'color')

    # Determine the title image size
    fontSizePx = getDocumentFontSize()
    margin = 1.5 * fontSizePx
    width = getWindowWidth() - 2 * margin
    height = getWindowHeight() - 2 * margin - 4 * fontSizePx

    # Compute the title text size
    titleLineSpacing = height / (8 - if(title2 == null, 1, 0) - if(subtitle == null, 1.5, 0) - if(imageURL == null, 2, 0))
    maxTitleFontSizePx = titleLineSpacing
    maxTitleLine = if(stringLength(title) > stringLength(title2), title, title2)
    titleFontSizePx = mathMin(maxTitleFontSizePx, getTextHeight(maxTitleLine, 0.9 * width))
    subtitleFontSizePx = 0.7 * titleFontSizePx
    imageHeight = 2 * titleFontSizePx
    imageWidth = 4 * imageHeight
    titleY = 1.5 * titleLineSpacing
    titleY2 = titleY + if(title2 != null, titleLineSpacing, 0)
    subtitleY = titleY2 + if(subtitle != null, 1.5 * titleLineSpacing, 0)
    imageY = subtitleY + if(imageURL != null, 2 * titleLineSpacing - 0.5 * imageHeight, 0)

    # Render the title page
    setDocumentTitle(if(title2 != null, ' ' + title2))
    documentReset()
    recipeMenu()
    setDrawingSize(width, height)
    drawStyle('none', 1, if(color != null, color, 'lightblue'))
    drawRect(0, 0, width, height)
    drawTextStyle(titleFontSizePx, 'black', true)
    drawText(title, 0.5 * width, titleY)
    if(title2 != null, drawText(title2, 0.5 * width, titleY2))
    drawTextStyle(subtitleFontSizePx, 'black', true, true)
    if(subtitle != null, drawText(subtitle, 0.5 * width, subtitleY))
    if(imageURL != null, drawImage(0.5 * width - 0.5 * imageWidth, imageY, imageWidth, imageHeight, imageURL))
    if(imageURL != null && imageClickURL != null, drawOnClick(recipeTitleOnImageClick))
    if(sourceURL != null, markdownPrint('[Source Code](' + sourceURL + ')'))
endfunction


function recipeTitleOnImageClick()
    model = getGlobal(recipeTitlePageGlobal)
    imageClickURL = objectGet(model, 'imageClickURL')
    setWindowLocation(imageClickURL)
endfunction
