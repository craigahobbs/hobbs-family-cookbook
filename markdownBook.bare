# Licensed under the MIT License
# https://github.com/craigahobbs/hobbs-family-cookbook/blob/main/LICENSE

include <args.bare>
include <forms.bare>
include 'markdownBookArgs.bare'


#
# The Markdown Book application
#


# The Markdown Book application main entry point
async function markdownBook(bookURL):
    # Load and validate the Markdown Book file
    bookURL = if(bookURL != null, bookURL, 'book.json')
    book = schemaValidate(bookTypes, 'MarkdownBook', jsonParse(systemFetch(bookURL)))

    # Render the page
    args = argsParse(markdownBookArguments)
    if objectGet(args, 'doc'):
        markdownBookDoc()
    elif objectHas(args, 'search'):
        markdownBookSearch(args, book)
    else:
        markdownBookIndex(args, book)
    endif
endfunction


# Render the Markdown Book index
async function markdownBookIndex(args, book):
    # Set the page title
    title = objectGet(book, 'title')
    documentSetTitle(title)
    markdownPrint( \
        argsLink(markdownBookArguments, 'Title', null, false, null, objectGet(book, 'titleURL')), \
        ' | ', \
        argsLink(markdownBookArguments, 'Search', {'search': ''}), \
        '', \
        '# ' + markdownEscape(title) \
    )

    # Render the category links
    selectedCategory = objectGet(args, 'category')
    for category in objectGet(book, 'categories'):
        categoryTitle = objectGet(category, 'title')
        isSelected = (selectedCategory == categoryTitle)

        # Render the category title link
        markdownPrint('', '## ' + argsLink(markdownBookArguments, categoryTitle, {'category': if(isSelected, null, categoryTitle)}))

        # If this is the selected category, fetch the category files and render the file links
        if isSelected:
            categoryURLs = objectGet(category, 'files')
            categoryTexts = systemFetch(categoryURLs)
            for categoryURL, ixFile in categoryURLs:
                categoryText = arrayGet(categoryTexts, ixFile)
                fileTitle = markdownTitle(markdownParse(categoryText))
                linkTitle = if(fileTitle != null, fileTitle, categoryURL)
                linkMarkdown = argsLink(markdownBookArguments, linkTitle, {'category': categoryTitle}, false, argsTopHeaderId, categoryURL)
                markdownPrint('', '&nbsp;' + linkMarkdown)
            endfor
        endif
    endfor
endfunction


# Render the Markdown Book file format documentation
function markdownBookDoc():
    documentSetTitle('MarkdownBook')
    elementModelRender(schemaElements(bookTypes, 'MarkdownBook'))
endfunction


# Render the Markdown Book search page
async function markdownBookSearch(args, book):
    searchText = objectGet(args, 'search')

    # Set the page title
    title = objectGet(book, 'title')
    documentSetTitle(title)
    markdownPrint( \
        argsLink(markdownBookArguments, 'Index'), \
        '', \
        '# Search' \
    )

    # Render the search form
    elementModelRender([ \
        {'html': 'p', 'elem': formsTextElements('search-text', searchText, 30, markdownBookSearchOnClick)}, \
        {'html': 'p', 'elem': formsLinkButtonElements('Search', markdownBookSearchOnClick)} \
    ])
    documentSetFocus('search-text')

    # Compute the search results and render
    if searchText != '':
        markdownPrint('## Results')
        results = markdownBookSearchResults(book, searchText)
        if arrayLength(results) != 0:
            for result in results:
                resultURL = objectGet(result, 'url')
                resultCategory = objectGet(result, 'category')
                resultTitle = objectGet(result, 'title')
                markdownPrint( \
                    '', \
                    argsLink(markdownBookArguments, resultTitle, {'category': resultCategory}, false, null, resultURL) \
                )
            endfor
        else:
            markdownPrint('No matching pages found')
        endif
    endif
endfunction


function markdownBookSearchOnClick():
    searchText = documentInputValue('search-text')
    windowSetLocation(argsURL(markdownBookArguments, {'search': searchText}))
endfunction


async function markdownBookSearchResults(book, text):
    # Create the search text regex
    words = regexSplit(regexNew('\s+'), text)
    wordsEscaped = []
    minSearchWordLength = 3
    for word in words:
        if stringLength(word) >= minSearchWordLength:
            arrayPush(wordsEscaped, regexEscape(word))
        endif
    endfor
    if arrayLength(wordsEscaped) == 0:
        return []
    endif
    reSearch = regexNew('\\b(?:' + arrayJoin(wordsEscaped, '|') + ')', 'i')

    # Compute the list of pages (url, category)
    pages = []
    pageURLs = []
    for category in objectGet(book, 'categories'):
        for fileURL in objectGet(category, 'files'):
            arrayPush(pages, {'url': fileURL, 'category': objectGet(category, 'title')})
            arrayPush(pageURLs, fileURL)
        endfor
    endfor

    # Load all pages and search each page's text
    results = []
    pageTexts = systemFetch(pageURLs)
    for page, ixPage in pages:
        pageText = arrayGet(pageTexts, ixPage)
        if pageText != null:
            # Add the result page title
            pageTitle = markdownTitle(markdownParse(pageText))
            objectSet(page, 'title', pageTitle)

            # Add the page match
            matches = regexMatchAll(reSearch, pageText)
            matchCount = arrayLength(matches)
            if matchCount:
                objectSet(page, 'matches', matchCount)
                arrayPush(results, page)
            endif
        endif
    endfor

    # Return sorted list of matching pages (url, title, category, matches)
    return arraySort(results, markdownBookSearchSort)
endfunction


function markdownBookSearchSort(a, b):
    aMatches = -objectGet(a, 'matches')
    bMatches = -objectGet(b, 'matches')
    compareMatches = if(aMatches < bMatches, -1, if(aMatches == bMatches, 0, 1))
    if compareMatches != 0:
        return compareMatches
    endif

    aTitle = objectGet(a, 'title')
    bTitle = objectGet(b, 'title')
    return if(aTitle < bTitle, -1, if(aTitle == bTitle, 0, 1))
endfunction


# The Markdown Book file format schema
bookTypes = schemaParse( \
    '# The Markdown Book JSON file format', \
    'struct MarkdownBook', \
    '    # The book title', \
    '    string title', \
    '', \
    "    # The markdown book's title page markdown file relative URL", \
    '    optional string(len > 0) titleURL', \
    '', \
    "    # The markdown book's categories", \
    '    MarkdownBookCategory[len > 0] categories', \
    '', \
    '', \
    '# The Markdown Book category struct', \
    'struct MarkdownBookCategory', \
    '', \
    '    # The category title', \
    '    string(len > 0) title', \
    '', \
    "    # The category's markdown file relative URLs", \
    '    string(len > 0)[len > 0] files' \
)
