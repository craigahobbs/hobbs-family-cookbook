# Licensed under the MIT License
# https://github.com/craigahobbs/hobbs-family-cookbook/blob/main/LICENSE


#
# The Markdown Book application
#


# The Markdown Book application main entry point
async function markdownBook(bookURL)
    # Load and validate the Markdown Book file
    bookURL = if(bookURL != null, bookURL, 'book.json')
    book = schemaValidate(bookTypes, 'MarkdownBook', fetch(bookURL))

    # Render the page
    if(vDoc, markdownBookDoc(), \
    if(vSearch != null, markdownBookSearch(book), \
    markdownBookIndex(book)))
endfunction


# Render the Markdown Book file format documentation
function markdownBookDoc()
    setDocumentTitle('MarkdownBook')
    schemaPrint(bookTypes, 'MarkdownBook')
endfunction


# Render the Markdown Book search page
async function markdownBookSearch(book)
    title = objectGet(book, 'title')

    # Set the page title
    setDocumentTitle(title)
    markdownPrint( \
        '[Index](#var=)', \
        '# Search' \
    )

    # Render the search form
    elementModelRender(arrayNew( \
        objectNew( \
            'html', 'input', \
            'attr', objectNew( \
                'autocomplete', 'off', \
                'id', 'search-text', \
                'style', 'font-size: inherit; border: thin solid black; padding: 0.4em;', \
                'type', 'text', \
                'value', vSearch \
            ), \
            'callback', objectNew('keyup', markdownBookSearchOnKeyup) \
        ), \
        objectNew('text', stringFromCharCode(160, 160)), \
        objectNew( \
            'html', 'a', \
            'attr', objectNew('style', 'cursor: pointer; user-select: none;'), \
            'elem', objectNew('text', 'Search'), \
            'callback', objectNew('click', markdownBookSearchOnClick) \
        ) \
    ))
    setDocumentFocus('search-text')

    # Compute the search results and render
    jumpif (vSearch == '') resultsDone
    markdownPrint('## Results')
    results = markdownBookSearchResults(book, vSearch)
    jumpif (arrayLength(results) == 0) resultsNone
        ixResult = 0
        resultLoop:
            result = arrayGet(results, ixResult)
            resultURL = objectGet(result, 'url')
            resultCategory = objectGet(result, 'category')
            resultTitle = objectGet(result, 'title')
            markdownPrint('', '[' + markdownEscapeText(resultTitle) + \
                '](#url=' + markdownEscapeURLComponent(resultURL) + "&var.vCategory='" + markdownEscapeURLComponent(resultCategory) + "')")
            ixResult = ixResult + 1
        jumpif (ixResult < arrayLength(results)) resultLoop
        jump resultsDone
    resultsNone:
        markdownPrint('No matching pages found')
    resultsDone:
endfunction


function markdownBookSearchOnClick()
    searchText = getDocumentInputValue('search-text')
    setWindowLocation("#var.vSearch='" + markdownEscapeURLComponent(searchText) + "'")
endfunction


function markdownBookSearchOnKeyup(keyCode)
    if(keyCode == 13, markdownBookSearchOnClick())
endfunction


async function markdownBookSearchResults(book, text)
    results = arrayNew()

    # Compute the list of pages (url, category)
    pages = arrayNew()
    pageURLs = arrayNew()
    categories = objectGet(book, 'categories')
    ixCategory = 0
    categoryLoop:
        category = arrayGet(categories, ixCategory)
        files = objectGet(category, 'files')
        ixFile = 0
        fileLoop:
            fileURL = arrayGet(files, ixFile)
            arrayPush(pages, objectNew('url', fileURL, 'category', objectGet(category, 'title')))
            arrayPush(pageURLs, fileURL)
            ixFile = ixFile + 1
        jumpif (ixFile < arrayLength(files)) fileLoop
        ixCategory = ixCategory + 1
    jumpif (ixCategory < arrayLength(categories)) categoryLoop

    # Create the search text regex
    words = stringSplit(text, regexNew('\s+'))
    wordsEscaped = arrayNew()
    minSearchWordLength = 3
    ixWord = 0
    wordLoop:
        word = arrayGet(words, ixWord)
        if(stringLength(word) >= minSearchWordLength, arrayPush(wordsEscaped, regexEscape(word)))
        ixWord = ixWord + 1
    jumpif (ixWord < arrayLength(words)) wordLoop
    jumpif (arrayLength(wordsEscaped) == 0) done
    reSearch = regexNew('\b(?:' + arrayJoin(wordsEscaped, '|') + ')', 'ig')

    # Load all pages and search each page's text
    pageTexts = fetch(pageURLs, null, true)
    ixPage = 0
    pageLoop:
        page = arrayGet(pages, ixPage)
        pageText = arrayGet(pageTexts, ixPage)

        # Add the result page title
        pageTitle = markdownTitle(markdownParse(pageText))
        objectSet(page, 'title', pageTitle)

        # Add the result page match count
        matches = regexMatchAll(reSearch, pageText)
        objectSet(page, 'matches', arrayLength(matches))

        # If a match, add to the results
        if(arrayLength(matches) > 0, arrayPush(results, page))

        ixPage = ixPage + 1
    jumpif (ixPage < arrayLength(pages)) pageLoop

    # Return sorted list of matching pages (url, title, category, matches)
    done:
    return arraySort(results, markdownBookSearchSort)
endfunction


function markdownBookSearchSort(a, b)
    aMatches = -objectGet(a, 'matches')
    bMatches = -objectGet(b, 'matches')
    compareMatches = if(aMatches < bMatches, -1, if(aMatches == bMatches, 0, 1))

    aTitle = objectGet(a, 'title')
    bTitle = objectGet(b, 'title')
    compareTitle = if(aTitle < bTitle, -1, if(aTitle == bTitle, 0, 1))

    return if(compareMatches != 0, compareMatches, compareTitle)
endfunction


# Render the Markdown Book index
async function markdownBookIndex(book)
    title = objectGet(book, 'title')
    titleURL = objectGet(book, 'titleURL')
    categories = objectGet(book, 'categories')

    # Set the page title
    setDocumentTitle(title)
    markdownPrint( \
        '[Title](#url=' + markdownEscapeURLComponent(titleURL) + '&var=)', \
        " | [Search](#var.vSearch='')", \
        '# ' + markdownEscapeText(title) \
    )

    # Render the category links
    ixCategory = 0
    categoryLoop:
        category = arrayGet(categories, ixCategory)
        categoryTitle = objectGet(category, 'title')
        isSelected = (vCategory == categoryTitle)
        categoryTitleURL = if(isSelected, '#var=', "#var.vCategory='" + markdownEscapeURLComponent(categoryTitle) + "'")

        # Render the category title link
        markdownPrint('', '## [' + markdownEscapeText(categoryTitle) + '](' + categoryTitleURL + ')')

        # If this is the selected category, fetch the category files and render the file links
        jumpif (!isSelected) categoryDone
            categoryFiles = objectGet(category, 'files')
            categoryTexts = fetch(categoryFiles, null, true)
            ixFile = 0
            fileLoop:
                categoryFile = arrayGet(categoryFiles, ixFile)
                categoryText = arrayGet(categoryTexts, ixFile)
                fileTitle = markdownTitle(markdownParse(categoryText))
                linkTitle = if(fileTitle != null, fileTitle, categoryFile)
                markdownPrint('', stringFromCharCode(160) + '[' + markdownEscapeText(linkTitle) + '](#url=' + \
                    markdownEscapeURLComponent(categoryFile) + "&var.vCategory='" + markdownEscapeURLComponent(categoryTitle) + "')")
                ixFile = ixFile + 1
            jumpif (ixFile < arrayLength(categoryFiles)) fileLoop
        categoryDone:

        ixCategory = ixCategory + 1
    jumpif (ixCategory < arrayLength(categories)) categoryLoop
endfunction


# The Markdown Book file format schema
bookTypes = schemaParse( \
    '# The Markdown Book JSON file format', \
    'struct MarkdownBook', \
    '    # The book title', \
    '    string title', \
    '', \
    "    # The markdown book's title page markdown file relative URL", \
    '    optional string(len > 0) titleURL', \
    '', \
    "    # The markdown book's categories", \
    '    MarkdownBookCategory[len > 0] categories', \
    '', \
    '', \
    '# The Markdown Book category struct', \
    'struct MarkdownBookCategory', \
    '', \
    '    # The category title', \
    '    string(len > 0) title', \
    '', \
    "    # The category's markdown file relative URLs", \
    '    string(len > 0)[len > 0] files' \
)
